{
  "comments": [
    {
      "key": {
        "uuid": "5bb2ea3d_a48f8337",
        "filename": "dbusUtils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-05-26T13:22:17Z",
      "side": 1,
      "message": "Do you have this mapper commit that returns the xyz.openbmc_project errors? https://github.com/openbmc/phosphor-objmgr/commit/e82b05840ba633d1f0d2e301720a5af6989c91f7?",
      "revId": "b065d0536c28d33fc358641fce7c4aef12e4c026",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c694966f_988e6993",
        "filename": "dbusUtils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2021-05-27T02:11:23Z",
      "side": 1,
      "message": "Yes, the build contains this commit.\nIn my case it gets `org.freedesktop.DBus.Error.ServiceUnknown: The name is not activatable` exception, which does not seem to be handled by phosphor-objmgr.\n\nIn virtual-sensor, it already handles the case when it fails to get the service that it will retry as long as the service name string is empty.\nSo I think it\u0027s perfectly safe to return empty string here.",
      "parentUuid": "5bb2ea3d_a48f8337",
      "revId": "b065d0536c28d33fc358641fce7c4aef12e4c026",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a1f223e_752d0dad",
        "filename": "dbusUtils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-06-04T13:08:49Z",
      "side": 1,
      "message": "I will defer to the maintainers.",
      "parentUuid": "c694966f_988e6993",
      "revId": "b065d0536c28d33fc358641fce7c4aef12e4c026",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e819bab2_c44c465a",
        "filename": "dbusUtils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-04T14:30:56Z",
      "side": 1,
      "message": "Isn\u0027t the service here (the one we\u0027re getting ServiceUnknown) mapper?  Is this a systemd service file ordering problem where phosphor-virtual-sensor doesn\u0027t correctly depend on mapper?",
      "parentUuid": "5a1f223e_752d0dad",
      "revId": "b065d0536c28d33fc358641fce7c4aef12e4c026",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a08bc55c_aedb0e6a",
        "filename": "dbusUtils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2021-06-06T02:21:52Z",
      "side": 1,
      "message": "Yes, it is related to the service dependency.\n\nBefore this change, we tried:\n1. Add \"After\u003dxxx.service\" to make sure phosphor-virtual-sensor runs after the dependent service, it does not work because the dependent object is not created when the service starts, it is created after a while (e.g. a sensor is created after EM probes the i2c buses). We get the crash intermittently.\n2. Add \"After\u003dmapper-waitxxx\" to make sure phosphor-virtual-sensor runs after the dependent DBus objects appears.\nThis way works, but it has problems:\n* When we add a new virtual sensor, the \"After\u003d\" will have to add the new dependent dbus objects;\n* Due to the fact that the dbus objects are created quite late after probing the i2c buses, the phosphor-virtual-sensor will be started very late, and thus the BMC_READY state is very late.\nThis results in HW CI failure because it checkes the BMC_READY time.\n\nThis patch resolves the above issues, that phosphor-virtual-sensor does not need to add dependency to any service, it just starts, try to get the service, and retry if it fails to get it.",
      "parentUuid": "e819bab2_c44c465a",
      "revId": "b065d0536c28d33fc358641fce7c4aef12e4c026",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}