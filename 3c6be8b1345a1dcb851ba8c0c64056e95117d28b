{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0944cda7_6361ba76",
        "filename": "dbusSensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1002022
      },
      "writtenOn": "2024-08-17T07:24:30Z",
      "side": 1,
      "message": "Is it suggested to added an [after] other sensor services in PVS service config since PVS monitors sensors from other sensor service?\ne.g.\nAfter\u003dpsusensor.service adcsensor.service fansensor.service\nand other sensors reltaed services.\n\nhttps://github.com/openbmc/phosphor-virtual-sensor/blob/master/phosphor-virtual-sensor.service.in\n\nservName can be set in PSV init function.",
      "revId": "3c6be8b1345a1dcb851ba8c0c64056e95117d28b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcba002a_c2c25089",
        "filename": "dbusSensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-08-19T15:10:43Z",
      "side": 1,
      "message": "No, it is not suggested to add additional `After` calls like that.  One major issue is that we don\u0027t know which processes will expose the sensors needed by the config.  In addition to the dbus-sensor based entities you mentioned here (likely used by your system), sensors could be coming from PLDM, etc.  All of this is system-specific.",
      "parentUuid": "0944cda7_6361ba76",
      "revId": "3c6be8b1345a1dcb851ba8c0c64056e95117d28b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d88f3c9d_1b0588a5",
        "filename": "dbusSensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1002022
      },
      "writtenOn": "2024-08-19T16:46:17Z",
      "side": 1,
      "message": "Some sensor services might be system-specific, so I use ```After``` without ```Requires``` in the service configuration — just for ordering purposes. Even though we don’t know which processes will expose the necessary sensors, should PVS always be running after all sensor services have started? I\u0027m not sure if my thinking is correct, so please let me know if there are any issues with it. Thank you!",
      "parentUuid": "dcba002a_c2c25089",
      "revId": "3c6be8b1345a1dcb851ba8c0c64056e95117d28b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c69b0ccf_817b4876",
        "filename": "dbusSensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1002022
      },
      "writtenOn": "2024-08-19T16:46:17Z",
      "side": 1,
      "message": "I’ve considered that there might some  system-specific senosor services.Hence, using",
      "parentUuid": "dcba002a_c2c25089",
      "revId": "3c6be8b1345a1dcb851ba8c0c64056e95117d28b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e11e0ab_595199a0",
        "filename": "dbusSensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-13T13:45:18Z",
      "side": 1,
      "message": "I think you can get the service name from the message itself? The mapper is processing the signal at the same  time, so it could be a race on if it even has it yet.",
      "revId": "3c6be8b1345a1dcb851ba8c0c64056e95117d28b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "691b1c87_1ca8c553",
        "filename": "dbusSensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1002022
      },
      "writtenOn": "2024-08-14T01:48:34Z",
      "side": 1,
      "message": "I think the service name is not included in the message.\nI have monitored the interfacesadded signal through bus-monitor. The message does not contain the service name.\n\nLog:\n```\nType\u003dsignal  Endian\u003dl  Flags\u003d1  Version\u003d1 Cookie\u003d51  Timestamp\u003d\"Tue 2023-11-14 02:16:34.231193 UTC\"\n  Sender\u003d:1.24019  Path\u003d/xyz/openbmc_project/inventory  Interface\u003dorg.freedesktop.DBus.ObjectManager  Member\u003dInterfacesAdded\n  UniqueName\u003d:1.24019\n  MESSAGE \"oa{sa{sv}}\" {\n          OBJECT_PATH \"/xyz/openbmc_project/inventory/system/board/Yosemite_4_Floating_Falls_Slot_6/CXL\";\n          ARRAY \"{sa{sv}}\" {\n                  DICT_ENTRY \"sa{sv}\" {\n                          STRING \"xyz.openbmc_project.Configuration.MCTPEndpoint\";\n                          ARRAY \"{sv}\" {\n```\n\nThanks for pointing out that there might be a race.\nWould adding a mutex for the servName be a suitable approach?",
      "parentUuid": "5e11e0ab_595199a0",
      "revId": "3c6be8b1345a1dcb851ba8c0c64056e95117d28b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afcf422c_93141e07",
        "filename": "dbusSensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1002022
      },
      "writtenOn": "2024-08-14T01:56:25Z",
      "side": 1,
      "message": "I will study if there is another way to avoid the race.",
      "parentUuid": "691b1c87_1ca8c553",
      "revId": "3c6be8b1345a1dcb851ba8c0c64056e95117d28b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff60cd1c_3783ed38",
        "filename": "dbusSensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-14T12:44:12Z",
      "side": 1,
      "message": "The Sender field is the unique name, just not  the well known name.  So while it would work, it could change after a restart.  The mapper handles it by also listening to NameOwnerChanged signals to map between the two, but that isn\u0027t really possible here.\n\nMaybe Patrick has an idea.",
      "parentUuid": "afcf422c_93141e07",
      "revId": "3c6be8b1345a1dcb851ba8c0c64056e95117d28b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cc14f51_7417f53c",
        "filename": "dbusSensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-08-16T14:59:31Z",
      "side": 1,
      "message": "A mutex doesn\u0027t help because this is a race condition with another process that is also processing this signal.  You can\u0027t know when that process is done completing its processing.\n\n[@Matt - For what it is worth, this is why Mapper was suppose to have causal ordering, but it got removed in the Python -\u003e C++ rewrite that was done years ago now.]\n\nCan we defer the service lookup until the first access after the timer?  If the `servName.empty()`, check with mapper?",
      "parentUuid": "ff60cd1c_3783ed38",
      "revId": "3c6be8b1345a1dcb851ba8c0c64056e95117d28b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd823c42_c509f4c7",
        "filename": "dbusSensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-16T15:38:10Z",
      "side": 1,
      "message": "\u003e causal ordering\n\nWhat was that exactly?",
      "parentUuid": "8cc14f51_7417f53c",
      "revId": "3c6be8b1345a1dcb851ba8c0c64056e95117d28b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e490dfd_261951f3",
        "filename": "dbusSensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-08-16T15:56:54Z",
      "side": 1,
      "message": "https://en.wikipedia.org/wiki/Causal_consistency\n\nIn this case we have something like this:\n\n```\nAdd(1) -\u003e Mapper\n       |         ^\n       -\u003e PVS(2) | \n```\n\nSince the Add \"causes\" action in both PVS and Mapper, PVS shouldn\u0027t be able to get an answer from Mapper indicating that the action hasn\u0027t happened yet.\n\n1 caused 2, so 2 shouldn\u0027t get an answer that indicated 1 hasn\u0027t happened yet.",
      "parentUuid": "fd823c42_c509f4c7",
      "revId": "3c6be8b1345a1dcb851ba8c0c64056e95117d28b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}